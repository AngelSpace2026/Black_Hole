exec("""\nT=FileNotFoundError\nS=range\nJ=ValueError\nI=b'\\x00'\nD=input\nG='>I'\nF=open\nC=len\nA=print\nimport os,random as E,struct as B,time,paq as H\ndef O(input_data):\n	A=input_data\n	if not isinstance(A,bytes):raise J('Input data must be bytes.')\n	B=A.lstrip(I);return B or I\ndef K(input_data,chunk_size,positions):\n	E=input_data;B=chunk_size;A=[E[A:A+B]for A in S(0,C(E),B)];F=(B-C(A[-1])%B)%B;A[-1]+=I*F\n	for D in positions:\n		if 0<=D<C(A):A[D]=A[D][::-1]\n	return b''.join(A)\ndef Y(data):B='big';C=E.randint(-1,2**64-1);A=int.from_bytes(data,byteorder=B,signed=False);A-=C;A=A&2**64-1;return A.to_bytes((A.bit_length()+7)//8,byteorder=B)\ndef R(data,chunk_size,positions,original_size):A=positions;D=B.pack(G,original_size)+B.pack(G,chunk_size)+B.pack('>B',C(A))+B.pack(f">{C(A)}I",*A);E=H.compress(D+data);return E\ndef L(compressed_filename):\n	J=compressed_filename\n	try:\n		with F(J,'rb')as L:M=L.read()\n		D=H.decompress(M);N=B.unpack(G,D[:4])[0];O=B.unpack(G,D[4:8])[0];I=B.unpack('>B',D[8:9])[0];P=B.unpack(f">{I}I",D[9:9+I*4]);E=K(D[9+I*4:],O,P);E=E[:N];Q=J.replace('.compressed.bin','')\n		with F(Q,'wb')as R:R.write(E)\n		A(f"Decompression complete. Restored file size: {C(E)} bytes")\n	except(T,H.PAQError,B.error)as S:A(f"Decompression failed: {S}")\ndef M(input_filename,max_consecutive_no_improvements=3600):\n	L=input_filename\n	try:\n		with F(L,'rb')as Z:M=Z.read();B=C(M)\n	except T:A(f"Error: Input file '{L}' not found.");return\n	N=float('inf');G=1;H=[];O=0;U=0\n	while O<max_consecutive_no_improvements:\n		U+=1;D=E.randint(1,min(256,B));V=B//D;W=E.randint(0,min(V,64));I=sorted(E.sample(S(V),W))if W>0 else[];P=K(M,D,I);P=Y(P);J=R(P,D,I,B);Q=C(J)/B\n		if Q<N:N=Q;G=D;H=I;O=0;A(f"Improved compression: {C(J)} bytes (PAQ size) (chunk size: {D}, positions: {I})");A(f"Compression ratio: {Q:.4f}")\n		else:O+=1\n	A(f"\\nBest compression achieved after {U} iterations:");A(f"Compression ratio: {N:.4f}");A(f"Chunk size: {G}");A(f"Positions: {H}");X=f"{L}.compressed.bin"\n	try:\n		with F(X,'wb')as a:J=R(K(M,G,H),G,H,B);a.write(J)\n		A(f"Compressed file saved as {X}")\n	except Exception as b:A(f"Error writing compressed file: {b}")\ndef N():\n	A('Created by Jurijus Pacalovas (Improved by Bard).')\n	while True:\n		try:\n			B=int(D('Enter mode (1 for compress, 2 for extract): '))\n			if B not in[1,2]:A('Error: Please enter 1 for compress or 2 for extract.')\n			else:break\n		except J:A('Error: Invalid input. Please enter a number (1 or 2).')\n	if B==1:C=D('Enter input file name to compress: ');E=3600;M(C,E)\n	elif B==2:F=D('Enter the base name of the compressed file to extract (without .compressed.bin): ');G=f"{F}.compressed.bin";L(G)\nif __name__=='__main__':N()\n""")